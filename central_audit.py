#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
C√≥digo Original do Usu√°rio - Adaptado com Debugs Detalhados
Gera prints das empresas em modo invis√≠vel com logs completos
"""

import time
import os
import json
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager

def gerar_prints_com_debug(modo_invisivel=True):
    """Gera prints das empresas com debug detalhado"""
    
    print("üöÄ INICIANDO GERA√á√ÉO DE PRINTS COM DEBUG DETALHADO")
    print("=" * 70)
    if modo_invisivel:
        print("üëª MODO INVIS√çVEL ATIVADO - Colaborador n√£o ver√° nada!")
    else:
        print("üëÅÔ∏è MODO VIS√çVEL ATIVADO - Navegador aparecer√° na tela!")
    
    # Lista original do usu√°rio
    empresas = [
        [27119, "Matercaldas", "27119 - Matercaldas.png"],
        [26412, "Guimaraes 85", "26412 - Guimaraes 85.png"],
        [26413, "Guimaraes 63", "26413 - Guimaraes 63.png"],
        [7520, "Auto Posto Serra dos Pirineus", "7520 - Auto Posto Serra dos Pirineus.png"],
        [27138, "Mineira Materiais", "27138 - Mineira Materiais.png"],
        [24718, "Guifrii 50", "24718 - Guifrii 50.png"],
        [25992, "MARQUES E COSTA 81", "25992 - MARQUES E COSTA 81.png"],
        [26498, "MARQUES E COSTA 62", "26498 - MARQUES E COSTA 62.png"],
        [16289, "Equilibrio", "16289 - Equilibrio Homeopatia.png"],
        [17606, "MONTE CRISTO", "17606 - MONTE CRISTO.png"],
        [25991, "Mariana Joias", "25991 - Mariana Joias.png"],
        [15944, "CANTINHO FRIO", "15944 - CANTINHO FRIO.png"],
        [25715, "Casa Dibs", "25715 - Casa Dibs.png"],
        [26520, "Chao Nativo", "26520 - Chao Nativo.png"],
        [23980, "MERCEARIA E CONVENIENCIA DOS GAUCHOS", "23980 - MERCEARIA E CONVENIENCIA DOS GAUCHOS.png"],
        [17609, "Farmacia Essencial - 176", "17609 - Farmacia Essencial - 176.png"],
        [23703, "Farmacia Essencial - 257", "23703 - Farmacia Essencial - 257.png"],
        [26306, "Madeimanas Madeireira 60", "26306 - Madeimanas Madeireira 60.png"],
        [26305, "Madeimanas Madeireira 80", "26305 - Madeimanas Madeireira 80.png"],
        [26304, "Oliveira Casa", "26304 - Oliveira Casa e Constru√ß√£o.png"],
        [25716, "Posto Serra City", "25716 - Posto Serra City.png"],
        [23025, "Clinica San Francesco", "23025 - Clinica San Francesco.png"],
        [7517, "Posto Aderup", "7517 - Posto Aderup.png"],
        [16096, "Supermercado Feliz", "16096 - Supermercado Feliz.png"],
        [16660, "Posto Primavera 000170", "16660 - Posto Primavera 000170.png"],
        [16791, "Posto Petro Bessa", "16791 - Posto Petro Bessa.png"],
        [25488, "Drogaria Legitima - 00", "25488 - Drogaria Legitima - 00.png"],
        [25489, "Drogaria Legitima - 83", "25489 - Drogaria Legitima - 83.png"],
        [25490, "Drogaria Legitima - 46", "25490 - Drogaria Legitima - 46.png"]
    ]
    
    print(f"üè¢ Total de empresas a processar: {len(empresas)}")
    
    # Pasta de destino
    pasta_prints = r"C:\Users\Luiz Marcelo\Desktop\PROJETO AUDIT PRICIPAL\prints"
    if not os.path.exists(pasta_prints):
        os.makedirs(pasta_prints)
        print(f"üìÅ Pasta criada: {pasta_prints}")
    else:
        print(f"üìÅ Pasta existente: {pasta_prints}")
    
    # Configura√ß√µes do Chrome
    if modo_invisivel:
        print("üîß Configurando Chrome em modo INVIS√çVEL...")
    else:
        print("üîß Configurando Chrome em modo VIS√çVEL...")
    chrome_options = Options()
    
    # Controle do modo headless
    if modo_invisivel:
        chrome_options.add_argument("--headless=new")
        print("üëª Modo HEADLESS ativado - navegador ser√° INVIS√çVEL!")
    else:
        print("üëÅÔ∏è Modo VIS√çVEL ativado - navegador aparecer√° na tela!")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-plugins")
    chrome_options.add_argument("--disable-web-security")
    chrome_options.add_argument("--disable-features=VizDisplayCompositor")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--disable-background-timer-throttling")
    chrome_options.add_argument("--disable-backgrounding-occluded-windows")
    chrome_options.add_argument("--disable-renderer-backgrounding")
    chrome_options.add_argument("--disable-features=TranslateUI")
    chrome_options.add_argument("--disable-ipc-flooding-protection")
    chrome_options.add_argument("--enable-features=NetworkService,NetworkServiceLogging")
    chrome_options.add_argument("--force-device-scale-factor=1")
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    
    # Inicializa o driver
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    # Configura√ß√µes de timeout robustas
    driver.implicitly_wait(15)
    driver.set_page_load_timeout(60)
    driver.set_script_timeout(30)
    
    # Remove propriedades que indicam automa√ß√£o
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    sucessos = []
    falhas = []
    
    try:
        # 1. LOGIN
        print("\n1Ô∏è‚É£ FAZENDO LOGIN NO SISTEMA...")
        url = 'https://audit.conciliadora.com.br/Login/Index'
        driver.get(url)
        
        # Aguarda p√°gina carregar completamente
        WebDriverWait(driver, 30).until(
            lambda d: d.execute_script("return document.readyState") == "complete"
        )
        time.sleep(5)
        
        print(f"üîç [DEBUG] URL carregada: {driver.current_url}")
        print(f"üîç [DEBUG] T√≠tulo: {driver.title}")
        
        # Campos de login
        print("üîç [DEBUG] Procurando campos de login...")
        login_field = WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.ID, 'login'))
        )
        password_field = WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.ID, 'password'))
        )
        print("‚úÖ [DEBUG] Campos de login encontrados!")
        
        # Preenche credenciais
        print("‚å®Ô∏è [DEBUG] Preenchendo credenciais...")
        login_field.clear()
        login_field.send_keys('joao.vitor@consultoriaexpansao.com.br')
        time.sleep(2)
        
        password_field.clear()
        password_field.send_keys('Acesso#13')
        time.sleep(3)
        
        # Bot√£o de login
        print("üîç [DEBUG] Procurando bot√£o de login...")
        btn_login = WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.ID, 'btnLogin'))
        )
        print("üñ±Ô∏è [DEBUG] Clicando no bot√£o de login...")
        btn_login.click()
        
        # Aguarda redirecionamento
        print("‚è≥ [DEBUG] Aguardando redirecionamento...")
        WebDriverWait(driver, 30).until(
            lambda d: d.current_url != url
        )
        time.sleep(6)
        
        print(f"‚úÖ Login realizado com sucesso!")
        print(f"üîç [DEBUG] URL ap√≥s login: {driver.current_url}")
        
        # 2. NAVEGA√á√ÉO PARA RELAT√ìRIOS
        print("\n2Ô∏è‚É£ NAVEGANDO PARA RELAT√ìRIOS...")
        
        # Menu lateral
        print("üîç [DEBUG] Procurando menu lateral...")
        try:
            menu_lateral = WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.ID, "kt_aside_menu"))
            )
            print("‚úÖ [DEBUG] Menu lateral encontrado!")
            menu_lateral.click()
            time.sleep(10)
        except TimeoutException:
            print("‚ùå [DEBUG] Menu lateral n√£o encontrado!")
            raise Exception("Menu lateral n√£o encontrado")
        
        # Menu Vendas
        print("üîç [DEBUG] Procurando menu Vendas...")
        try:
            vendas_menu = WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.XPATH, "//span[@class='nomeGrupoSideBar' and text()='Vendas']"))
            )
            print("‚úÖ [DEBUG] Menu Vendas encontrado!")
            vendas_menu.click()
            time.sleep(6)
        except TimeoutException:
            print("‚ùå [DEBUG] Menu Vendas n√£o encontrado!")
            raise Exception("Menu Vendas n√£o encontrado")
        
        # Submenu
        print("üîç [DEBUG] Procurando submenu...")
        try:
            submenu = WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.XPATH, '//*[@id="kt_aside_menu"]/ul/li[2]/div/ul/li[1]/a/span'))
            )
            print("‚úÖ [DEBUG] Submenu encontrado!")
            submenu.click()
            time.sleep(5)
        except TimeoutException:
            print("‚ùå [DEBUG] Submenu n√£o encontrado!")
            raise Exception("Submenu n√£o encontrado")
        
        print("‚úÖ Navega√ß√£o para relat√≥rios conclu√≠da!")
        
        # 3. CONFIGURAR FILTRO DE DATA
        print("\n3Ô∏è‚É£ CONFIGURANDO FILTRO DE DATA...")
        data_atual = datetime.now()
        dia_atual = data_atual.day
        mes_atual = f"{data_atual.month:02d}"
        ano_atual = data_atual.year
        dias_anterior = (data_atual - timedelta(days=3)).strftime("%d")
        
        print(f"üìÖ [DEBUG] Data atual: {dia_atual}/{mes_atual}/{ano_atual}")
        print(f"üìÖ [DEBUG] Data a filtrar: {dias_anterior}/{mes_atual}/{ano_atual}")
        
        data_xpath = f"//td[@data-value='{ano_atual}/{mes_atual}/{dias_anterior}']"
        print(f"üîç [DEBUG] XPath da data: {data_xpath}")
        
        try:
            data_element = WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, data_xpath))
            )
            print("‚úÖ [DEBUG] Elemento de data encontrado!")
            
            # Aguarda um pouco para elementos carregarem
            time.sleep(3)
            
            # Tenta fechar qualquer dropdown ou overlay que possa estar aberto
            print(f"üîç [DEBUG] Verificando se h√° overlays abertos...")
            try:
                # Clica em uma √°rea neutra para fechar dropdowns
                body = driver.find_element(By.TAG_NAME, "body")
                driver.execute_script("arguments[0].click();", body)
                time.sleep(2)
            except:
                pass
            
            # Scroll para o elemento
            print(f"üìú [DEBUG] Fazendo scroll para o elemento de data...")
            driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", data_element)
            time.sleep(3)
            
            # Tenta clicar usando diferentes m√©todos
            print(f"üñ±Ô∏è [DEBUG] Tentando clicar na data...")
            
            # M√©todo 1: Clique normal
            try:
                data_element.click()
                print(f"‚úÖ [DEBUG] Data clicada com sucesso (m√©todo normal)!")
                time.sleep(8)
                print("‚úÖ Data filtrada com sucesso!")
            except Exception as e:
                print(f"‚ö†Ô∏è [DEBUG] M√©todo normal falhou: {e}")
                
                # M√©todo 2: JavaScript click
                try:
                    print(f"üîß [DEBUG] Tentando clique via JavaScript...")
                    driver.execute_script("arguments[0].click();", data_element)
                    print(f"‚úÖ [DEBUG] Data clicada com sucesso (m√©todo JavaScript)!")
                    time.sleep(8)
                    print("‚úÖ Data filtrada com sucesso!")
                except Exception as e2:
                    print(f"‚ö†Ô∏è [DEBUG] M√©todo JavaScript falhou: {e2}")
                    
                    # M√©todo 3: ActionChains
                    try:
                        print(f"üîß [DEBUG] Tentando clique via ActionChains...")
                        from selenium.webdriver.common.action_chains import ActionChains
                        actions = ActionChains(driver)
                        actions.move_to_element(data_element).click().perform()
                        print(f"‚úÖ [DEBUG] Data clicada com sucesso (m√©todo ActionChains)!")
                        time.sleep(8)
                        print("‚úÖ Data filtrada com sucesso!")
                    except Exception as e3:
                        print(f"‚ö†Ô∏è [DEBUG] M√©todo ActionChains falhou: {e3}")
                        
                        # M√©todo 4: Aguarda elemento ser clic√°vel
                        try:
                            print(f"‚è≥ [DEBUG] Aguardando elemento ser clic√°vel...")
                            clickable_element = WebDriverWait(driver, 10).until(
                                EC.element_to_be_clickable((By.XPATH, data_xpath))
                            )
                            clickable_element.click()
                            print(f"‚úÖ [DEBUG] Data clicada com sucesso (m√©todo aguarda clic√°vel)!")
                            time.sleep(8)
                            print("‚úÖ Data filtrada com sucesso!")
                        except Exception as e4:
                            print(f"‚ö†Ô∏è [DEBUG] Todos os m√©todos falharam!")
                            print(f"‚ùå [DEBUG] √öltimo erro: {e4}")
                            raise Exception(f"N√£o foi poss√≠vel clicar na data {dias_anterior}/{mes_atual}/{ano_atual}")
            
        except TimeoutException:
            print(f"‚ùå [DEBUG] Data n√£o encontrada: {data_xpath}")
            raise Exception(f"Data {dias_anterior}/{mes_atual}/{ano_atual} n√£o encontrada")
        
        # 4. PROCESSAR EMPRESAS
        print(f"\n4Ô∏è‚É£ PROCESSANDO {len(empresas)} EMPRESAS...")
        print("=" * 70)
        
        for i, empresa in enumerate(empresas, 1):
            codigo, nome, arquivo = empresa
            
            print(f"\n[{i}/{len(empresas)}] üè¢ PROCESSANDO: {nome}")
            print(f"üìã C√≥digo: {codigo}")
            print(f"üìÅ Arquivo: {arquivo}")
            
            try:
                # Campo de busca
                print(f"üîç [DEBUG] Procurando campo de busca...")
                input_xpath = '//*[@id="dropDownSearch"]/div[1]/div/div[1]/input'
                
                try:
                    caixa_de_texto = WebDriverWait(driver, 20).until(
                        EC.element_to_be_clickable((By.XPATH, input_xpath))
                    )
                    print(f"‚úÖ [DEBUG] Campo de busca encontrado!")
                except TimeoutException:
                    print(f"‚ùå [DEBUG] Campo de busca n√£o encontrado!")
                    print(f"üîç [DEBUG] URL atual: {driver.current_url}")
                    falhas.append(f"{nome}: Campo de busca n√£o encontrado")
                    continue
                
                # Scroll e intera√ß√£o
                print(f"üìú [DEBUG] Fazendo scroll para o campo...")
                driver.execute_script("arguments[0].scrollIntoView(true);", caixa_de_texto)
                time.sleep(2)
                
                print(f"üñ±Ô∏è [DEBUG] Clicando no campo de busca...")
                caixa_de_texto.click()
                time.sleep(2)
                
                print(f"üßπ [DEBUG] Limpando campo...")
                caixa_de_texto.clear()
                time.sleep(2)
                
                print(f"‚å®Ô∏è [DEBUG] Digitando: '{nome}'")
                caixa_de_texto.send_keys(nome)
                time.sleep(3)
                
                print(f"‚¨áÔ∏è [DEBUG] Pressionando ARROW_DOWN...")
                caixa_de_texto.send_keys(Keys.ARROW_DOWN)
                
                print(f"‚Ü©Ô∏è [DEBUG] Pressionando ENTER...")
                caixa_de_texto.send_keys(Keys.ENTER)
                time.sleep(4)
                
                # Bot√£o Apply
                print(f"üîç [DEBUG] Procurando bot√£o Apply...")
                try:
                    btn_apply = WebDriverWait(driver, 20).until(
                        EC.element_to_be_clickable((By.ID, 'btnApply'))
                    )
                    print(f"‚úÖ [DEBUG] Bot√£o Apply encontrado!")
                except TimeoutException:
                    print(f"‚ùå [DEBUG] Bot√£o Apply n√£o encontrado!")
                    falhas.append(f"{nome}: Bot√£o Apply n√£o encontrado")
                    continue
                
                print(f"üñ±Ô∏è [DEBUG] Clicando no Apply...")
                btn_apply.click()
                time.sleep(8)
                
                # Aguarda carregar
                print(f"‚è≥ [DEBUG] Aguardando p√°gina carregar...")
                WebDriverWait(driver, 30).until(
                    lambda d: d.execute_script("return document.readyState") == "complete"
                )
                time.sleep(3)
                
                # Verifica se h√° dados
                print(f"üîç [DEBUG] Verificando dados na tela...")
                data_elements = driver.find_elements(By.XPATH, "//table//tr | //div[contains(@class, 'data')] | //div[contains(@class, 'result')]")
                print(f"üìä [DEBUG] Elementos de dados encontrados: {len(data_elements)}")
                
                # Screenshot
                caminho_completo = os.path.join(pasta_prints, arquivo)
                print(f"üì∏ [DEBUG] Salvando screenshot: {caminho_completo}")
                
                driver.save_screenshot(caminho_completo)
                
                # Verifica arquivo
                if os.path.exists(caminho_completo):
                    tamanho = os.path.getsize(caminho_completo)
                    print(f"‚úÖ [DEBUG] Screenshot salvo! Tamanho: {tamanho} bytes")
                    
                    if tamanho > 10000:
                        sucessos.append(nome)
                        print(f"üéâ {arquivo} - SUCESSO!")
                    else:
                        falhas.append(f"{nome}: Arquivo muito pequeno ({tamanho} bytes)")
                        print(f"‚ö†Ô∏è {arquivo} - Arquivo pequeno, pode estar vazio!")
                else:
                    falhas.append(f"{nome}: Arquivo n√£o foi criado")
                    print(f"‚ùå {arquivo} - Arquivo n√£o foi criado!")
                
            except Exception as e:
                falhas.append(f"{nome}: {str(e)}")
                print(f"‚ùå ERRO ao processar {nome}: {e}")
                
                # Screenshot de erro
                try:
                    erro_path = os.path.join(pasta_prints, f"ERRO_{codigo}_{nome.replace(' ', '_')}.png")
                    driver.save_screenshot(erro_path)
                    print(f"üì∏ [DEBUG] Screenshot de erro salvo: {erro_path}")
                except:
                    pass
                
                continue
        
        # RESUMO FINAL
        print("\n" + "=" * 70)
        print("üéä PROCESSO FINALIZADO!")
        print("=" * 70)
        print(f"‚úÖ SUCESSOS: {len(sucessos)}")
        print(f"‚ùå FALHAS: {len(falhas)}")
        print(f"üìÅ Pasta de prints: {pasta_prints}")
        
        if sucessos:
            print(f"\n‚úÖ EMPRESAS PROCESSADAS COM SUCESSO:")
            for sucesso in sucessos:
                print(f"  - {sucesso}")
        
        if falhas:
            print(f"\n‚ùå EMPRESAS COM FALHA:")
            for falha in falhas:
                print(f"  - {falha}")
        
        print("=" * 70)
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO: {e}")
        
        # Screenshot de erro cr√≠tico
        try:
            erro_critico = os.path.join(pasta_prints, f"ERRO_CRITICO_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
            driver.save_screenshot(erro_critico)
            print(f"üì∏ Screenshot de erro cr√≠tico salvo: {erro_critico}")
        except:
            pass
        
    finally:
        driver.quit()
        print("\nüîá Navegador fechado - processo invis√≠vel conclu√≠do!")
        
        return sucessos, falhas

# Fun√ß√µes auxiliares para compatibilidade com interface robusta
import threading

should_stop = threading.Event()

def initialize_system():
    """Inicializa o sistema - compatibilidade com interface"""
    try:
        print("üîß Sistema inicializado")
        return True
    except Exception as e:
        print(f"‚ùå Erro na inicializa√ß√£o: {e}")
        return False

def get_empresas_ativas():
    """Retorna lista de empresas ativas - compatibilidade com interface"""
    empresas = [
        [27119, "Matercaldas", "27119 - Matercaldas.png"],
        [26412, "Guimaraes 85", "26412 - Guimaraes 85.png"],
        [26413, "Guimaraes 63", "26413 - Guimaraes 63.png"],
        [7520, "Auto Posto Serra dos Pirineus", "7520 - Auto Posto Serra dos Pirineus.png"],
        [27138, "Mineira Materiais", "27138 - Mineira Materiais.png"],
        [24718, "Guifrii 50", "24718 - Guifrii 50.png"],
        [25992, "MARQUES E COSTA 81", "25992 - MARQUES E COSTA 81.png"],
        [26498, "MARQUES E COSTA 62", "26498 - MARQUES E COSTA 62.png"],
        [16289, "Equilibrio", "16289 - Equilibrio Homeopatia.png"],
        [17606, "MONTE CRISTO", "17606 - MONTE CRISTO.png"],
        [25991, "Mariana Joias", "25991 - Mariana Joias.png"],
        [15944, "CANTINHO FRIO", "15944 - CANTINHO FRIO.png"],
        [25715, "Casa Dibs", "25715 - Casa Dibs.png"],
        [26520, "Chao Nativo", "26520 - Chao Nativo.png"],
        [23980, "MERCEARIA E CONVENIENCIA DOS GAUCHOS", "23980 - MERCEARIA E CONVENIENCIA DOS GAUCHOS.png"],
        [17609, "Farmacia Essencial - 176", "17609 - Farmacia Essencial - 176.png"],
        [23703, "Farmacia Essencial - 257", "23703 - Farmacia Essencial - 257.png"],
        [26306, "Madeimanas Madeireira 60", "26306 - Madeimanas Madeireira 60.png"],
        [26305, "Madeimanas Madeireira 80", "26305 - Madeimanas Madeireira 80.png"],
        [26304, "Oliveira Casa", "26304 - Oliveira Casa e Constru√ß√£o.png"],
        [25716, "Posto Serra City", "25716 - Posto Serra City.png"],
        [23025, "Clinica San Francesco", "23025 - Clinica San Francesco.png"],
        [7517, "Posto Aderup", "7517 - Posto Aderup.png"],
        [16096, "Supermercado Feliz", "16096 - Supermercado Feliz.png"],
        [16660, "Posto Primavera 000170", "16660 - Posto Primavera 000170.png"],
        [16791, "Posto Petro Bessa", "16791 - Posto Petro Bessa.png"],
        [25488, "Drogaria Legitima - 00", "25488 - Drogaria Legitima - 00.png"],
        [25489, "Drogaria Legitima - 83", "25489 - Drogaria Legitima - 83.png"],
        [25490, "Drogaria Legitima - 46", "25490 - Drogaria Legitima - 46.png"]
    ]
    return empresas

def get_total_empresas():
    """Retorna total de empresas - compatibilidade com interface"""
    return len(get_empresas_ativas())

def get_status_sistema():
    """Retorna status do sistema - compatibilidade com interface"""
    return "üëª Sistema Invis√≠vel Ativo - Colaborador n√£o v√™ nada!"

def gerar_prints(progress_callback=None, modo_invisivel=True):
    """Wrapper para gerar_prints_com_debug com callback de progresso"""
    return gerar_prints_com_debug(modo_invisivel)

def load_grupos_whatsapp():
    """Carrega grupos do WhatsApp do arquivo JSON"""
    try:
        if os.path.exists('grupos_whatsapp.json'):
            with open('grupos_whatsapp.json', 'r', encoding='utf-8') as f:
                grupos_data = json.load(f)
                # Filtra apenas grupos ativos
                return [(g['grupo'], g['arquivo']) for g in grupos_data if g.get('ativo', True)]
        else:
            # Lista padr√£o caso arquivo n√£o exista
            return [
                ("voc", "16289 - Equilibrio Homeopatia.png"),
                ("GUIMA", "26412 - Guimaraes 85.png"),
                ("GUIMA", "26413 - Guimaraes 63.png"),
                ("Materca", "27119 - Matercaldas.png"),
                ("Serra dos Pirineus", "7520 - Auto Posto Serra dos Pirineus.png"),
                ("Mineira Mat", "27138 - Mineira Materiais.png"),
                ("CANTINHO FRIO", "15944 - CANTINHO FRIO.png"),
                ("Casa Dibs", "25715 - Casa Dibs.png"),
                ("Chao Nativo", "26520 - Chao Nativo.png"),
                ("CONVENIENCIA", "23980 - MERCEARIA E CONVENIENCIA DOS GAUCHOS.png"),
                ("Farmacia Essencial", "17609 - Farmacia Essencial - 176.png"),
                ("Farmacia Essencial", "23703 - Farmacia Essencial - 257.png"),
                ("Madeimanas", "26306 - Madeimanas Madeireira 60.png"),
                ("Madeimanas", "26305 - Madeimanas Madeireira 80.png"),
                ("Oliveira Casa", "26304 - Oliveira Casa e Constru√ß√£o.png"),
                ("Serra City", "25716 - Posto Serra City.png"),
                ("San Francesco", "23025 - Clinica San Francesco.png"),
                ("Posto 8", "7517 - Posto Aderup.png"),
                ("Supermercado Feliz", "16096 - Supermercado Feliz.png"),
                ("Posto Primavera", "16660 - Posto Primavera 000170.png"),
                ("Petro Bessa", "16791 - Posto Petro Bessa.png"),
                ("Drogaria Legitima", "25488 - Drogaria Legitima - 00.png"),
                ("Drogaria Legitima", "25489 - Drogaria Legitima - 83.png"),
                ("Drogaria Legitima", "25490 - Drogaria Legitima - 46.png"),
            ]
    except Exception as e:
        print(f"‚ùå Erro ao carregar grupos WhatsApp: {e}")
        return []

def save_grupos_whatsapp(grupos_data):
    """Salva grupos do WhatsApp no arquivo JSON"""
    try:
        with open('grupos_whatsapp.json', 'w', encoding='utf-8') as f:
            json.dump(grupos_data, f, ensure_ascii=False, indent=4)
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar grupos WhatsApp: {e}")
        return False

def enviar_whatsapp(progress_callback=None, modo_invisivel=True):
    """Envia prints pelo WhatsApp"""
    
    print("üì± INICIANDO ENVIO PELO WHATSAPP")
    print("=" * 70)
    if modo_invisivel:
        print("üëª MODO INVIS√çVEL ATIVADO - Colaborador n√£o ver√° nada!")
    else:
        print("üëÅÔ∏è MODO VIS√çVEL ATIVADO - Navegador aparecer√° na tela!")
    
    # Configura√ß√µes do Chrome para WhatsApp
    if modo_invisivel:
        print("üîß Configurando Chrome em modo INVIS√çVEL para WhatsApp...")
    else:
        print("üîß Configurando Chrome em modo VIS√çVEL para WhatsApp...")
    chrome_options = Options()
    
    # Controle do modo headless para WhatsApp
    if modo_invisivel:
        chrome_options.add_argument("--headless=new")
        print("üëª Modo HEADLESS ativado para WhatsApp - navegador ser√° INVIS√çVEL!")
    else:
        print("üëÅÔ∏è Modo VIS√çVEL ativado para WhatsApp - navegador aparecer√° na tela!")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-plugins")
    chrome_options.add_argument("--disable-web-security")
    chrome_options.add_argument("--disable-features=VizDisplayCompositor")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--disable-background-timer-throttling")
    chrome_options.add_argument("--disable-backgrounding-occluded-windows")
    chrome_options.add_argument("--disable-renderer-backgrounding")
    chrome_options.add_argument("--disable-features=TranslateUI")
    chrome_options.add_argument("--disable-ipc-flooding-protection")
    chrome_options.add_argument("--enable-features=NetworkService,NetworkServiceLogging")
    chrome_options.add_argument("--force-device-scale-factor=1")
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    
    # Configura√ß√µes espec√≠ficas para WhatsApp
    user_data_dir = r"C:\Users\Luiz Marcelo\AppData\Local\Google\Chrome\User Data\Default"
    chrome_options.add_argument(f"--user-data-dir={user_data_dir}")
    chrome_options.add_argument(f'--profile-directory=Default')
    
    # Pasta de prints
    caminho_pasta = r"C:\Users\Luiz Marcelo\Desktop\PROJETO AUDIT PRICIPAL\prints"
    if not os.path.exists(caminho_pasta):
        os.makedirs(caminho_pasta)
        print(f"üìÅ Pasta criada: {caminho_pasta}")
    else:
        print(f"üìÅ Pasta existente: {caminho_pasta}")
    
    # Carrega grupos do WhatsApp do arquivo JSON
    empresas_whatsapp = load_grupos_whatsapp()
    
    print(f"üì± Total de envios WhatsApp a processar: {len(empresas_whatsapp)}")
    
    # Data da mensagem
    data_dois_dias_atras = datetime.now() - timedelta(days=3)
    data_formatada = data_dois_dias_atras.strftime("%d/%m/%Y")
    mensagem_texto = f"Ol√°, segue o quanto foi de vendas com as adquirentes no dia {data_formatada}, estamos enviando para que voc√™ confira com o que foi vendido em seu PDV"
    
    print(f"üìÖ Data da mensagem: {data_formatada}")
    print(f"üí¨ Mensagem: {mensagem_texto[:50]}...")
    
    sucessos = []
    falhas = []
    
    # Inicializa o driver
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    # Configura√ß√µes de timeout robustas
    driver.implicitly_wait(15)
    driver.set_page_load_timeout(60)
    driver.set_script_timeout(30)
    
    # Remove propriedades que indicam automa√ß√£o
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    try:
        # 1. ACESSA WHATSAPP WEB
        print("\n1Ô∏è‚É£ ACESSANDO WHATSAPP WEB...")
        driver.get("https://web.whatsapp.com/")
        
        # Aguarda p√°gina carregar completamente
        WebDriverWait(driver, 30).until(
            lambda d: d.execute_script("return document.readyState") == "complete"
        )
        time.sleep(10)
        
        print(f"üîç [DEBUG] URL carregada: {driver.current_url}")
        print(f"üîç [DEBUG] T√≠tulo: {driver.title}")
        
        # Aguarda WhatsApp estar logado
        print("‚è≥ [DEBUG] Aguardando WhatsApp estar logado...")
        try:
            WebDriverWait(driver, 60).until(
                EC.presence_of_element_located((By.ID, "side"))
            )
            print("‚úÖ WhatsApp logado com sucesso!")
            time.sleep(5)
        except TimeoutException:
            print("‚ùå [DEBUG] WhatsApp n√£o logou a tempo!")
            raise Exception("WhatsApp n√£o logou - verifique se est√° logado no navegador")
        
        # 2. PROCESSAR ENVIOS
        print(f"\n2Ô∏è‚É£ PROCESSANDO {len(empresas_whatsapp)} ENVIOS...")
        print("=" * 70)
        
        def enviar_print_invisivel(grupo, arquivo_print, index):
            """Envia print para um grupo espec√≠fico"""
            print(f"\n[{index+1}/{len(empresas_whatsapp)}] üì± ENVIANDO PARA: {grupo}")
            print(f"üìÅ Arquivo: {arquivo_print}")
            
            try:
                # Callback de progresso
                if progress_callback:
                    progress_callback(index+1, len(empresas_whatsapp), grupo)
                
                # Busca o grupo
                print(f"üîç [DEBUG] Procurando barra de busca...")
                barra_busca = WebDriverWait(driver, 20).until(
                    EC.element_to_be_clickable((By.XPATH, '//*[@id="side"]/div[1]/div/div[2]/div/div/div/p'))
                )
                print(f"‚úÖ [DEBUG] Barra de busca encontrada!")
                
                # Limpa e digita o grupo
                print(f"üßπ [DEBUG] Limpando barra de busca...")
                barra_busca.clear()
                barra_busca.send_keys(Keys.CONTROL, 'a')
                time.sleep(1)
                
                print(f"‚å®Ô∏è [DEBUG] Digitando grupo: '{grupo}'")
                barra_busca.send_keys(grupo)
                time.sleep(3)
                
                print(f"‚Ü©Ô∏è [DEBUG] Pressionando ENTER...")
                barra_busca.send_keys(Keys.ENTER)
                time.sleep(3)
                
                # Verifica se o arquivo existe
                caminho_print = os.path.join(caminho_pasta, arquivo_print)
                print(f"üîç [DEBUG] Verificando arquivo: {caminho_print}")
                
                if not os.path.exists(caminho_print):
                    print(f"‚ùå [DEBUG] Arquivo N√ÉO encontrado: {arquivo_print}")
                    falhas.append(f"{grupo}: Arquivo n√£o encontrado - {arquivo_print}")
                    return
                
                print(f"‚úÖ [DEBUG] Arquivo encontrado!")
                
                # Bot√£o de anexo
                print(f"üîç [DEBUG] Procurando bot√£o de anexo...")
                try:
                    attach_button = WebDriverWait(driver, 15).until(
                        EC.element_to_be_clickable((By.XPATH, '//*[@id="main"]/footer/div[1]/div/span/div/div[1]/div/button'))
                    )
                    print(f"‚úÖ [DEBUG] Bot√£o de anexo encontrado!")
                    time.sleep(2)
                    attach_button.click()
                    time.sleep(3)
                except TimeoutException:
                    print(f"‚ùå [DEBUG] Bot√£o de anexo n√£o encontrado!")
                    falhas.append(f"{grupo}: Bot√£o de anexo n√£o encontrado")
                    return
                
                # Input de imagem
                print(f"üîç [DEBUG] Procurando input de imagem...")
                try:
                    image_input = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, '//input[@accept="image/*,video/mp4,video/3gpp,video/quicktime"]'))
                    )
                    print(f"‚úÖ [DEBUG] Input de imagem encontrado!")
                    image_input.send_keys(caminho_print)
                    time.sleep(3)
                except TimeoutException:
                    print(f"‚ùå [DEBUG] Input de imagem n√£o encontrado!")
                    falhas.append(f"{grupo}: Input de imagem n√£o encontrado")
                    return
                
                # Bot√£o de enviar imagem
                print(f"üîç [DEBUG] Procurando bot√£o de enviar imagem...")
                try:
                    send_button = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.XPATH, '//*[@id="app"]/div/div[3]/div/div[2]/div[2]/span/div/div/div/div[2]/div/div[2]/div[2]/div/div/span'))
                    )
                    print(f"‚úÖ [DEBUG] Bot√£o de enviar imagem encontrado!")
                    send_button.click()
                    time.sleep(3)
                    print(f"üì∏ [DEBUG] Imagem {arquivo_print} enviada para {grupo}!")
                except TimeoutException:
                    print(f"‚ùå [DEBUG] Bot√£o de enviar imagem n√£o encontrado!")
                    falhas.append(f"{grupo}: Bot√£o de enviar imagem n√£o encontrado")
                    return
                
                # Enviar mensagem de texto
                print(f"üîç [DEBUG] Procurando campo de mensagem...")
                try:
                    mensagem_input = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, '//*[@id="main"]/footer/div[1]/div/span/div/div[2]/div[1]/div/div[1]'))
                    )
                    print(f"‚úÖ [DEBUG] Campo de mensagem encontrado!")
                    mensagem_input.send_keys(mensagem_texto)
                    time.sleep(2)
                except TimeoutException:
                    print(f"‚ùå [DEBUG] Campo de mensagem n√£o encontrado!")
                    falhas.append(f"{grupo}: Campo de mensagem n√£o encontrado")
                    return
                
                # Bot√£o de enviar mensagem
                print(f"üîç [DEBUG] Procurando bot√£o de enviar mensagem...")
                try:
                    mensagem_button = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.XPATH, '//*[@id="main"]/footer/div[1]/div/span/div/div[2]/div/div[4]/button'))
                    )
                    print(f"‚úÖ [DEBUG] Bot√£o de enviar mensagem encontrado!")
                    time.sleep(2)
                    mensagem_button.click()
                    time.sleep(3)
                    print(f"üí¨ [DEBUG] Mensagem enviada para {grupo}!")
                except TimeoutException:
                    print(f"‚ùå [DEBUG] Bot√£o de enviar mensagem n√£o encontrado!")
                    falhas.append(f"{grupo}: Bot√£o de enviar mensagem n√£o encontrado")
                    return
                
                sucessos.append(grupo)
                print(f"üéâ {grupo} - ENVIO COMPLETO!")
                
            except Exception as e:
                falhas.append(f"{grupo}: {str(e)}")
                print(f"‚ùå ERRO ao enviar para {grupo}: {e}")
        
        # Processa todos os envios
        for i, (grupo, arquivo_print) in enumerate(empresas_whatsapp):
            if should_stop.is_set():
                print("‚èπÔ∏è Processo interrompido pelo usu√°rio")
                break
                
            try:
                enviar_print_invisivel(grupo, arquivo_print, i)
                time.sleep(2)  # Pausa entre envios
            except Exception as e:
                falhas.append(f"{grupo}: {str(e)}")
                print(f"‚ùå ERRO ao processar {grupo}: {e}")
                continue
        
        # RESUMO FINAL
        print("\n" + "=" * 70)
        print("üì± ENVIO WHATSAPP FINALIZADO!")
        print("=" * 70)
        print(f"‚úÖ SUCESSOS: {len(sucessos)}")
        print(f"‚ùå FALHAS: {len(falhas)}")
        print(f"üìÅ Pasta de prints: {caminho_pasta}")
        
        if sucessos:
            print(f"\n‚úÖ GRUPOS COM ENVIO REALIZADO:")
            for sucesso in sucessos:
                print(f"  - {sucesso}")
        
        if falhas:
            print(f"\n‚ùå GRUPOS COM FALHA:")
            for falha in falhas:
                print(f"  - {falha}")
        
        print("=" * 70)
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO NO WHATSAPP: {e}")
        
        # Screenshot de erro cr√≠tico
        try:
            erro_critico = os.path.join(caminho_pasta, f"ERRO_WHATSAPP_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
            driver.save_screenshot(erro_critico)
            print(f"üì∏ Screenshot de erro cr√≠tico salvo: {erro_critico}")
        except:
            pass
        
    finally:
        driver.quit()
        print("\nüîá Navegador WhatsApp fechado - processo invis√≠vel conclu√≠do!")
        
        return sucessos, falhas

if __name__ == "__main__":
    print("üöÄ EXECUTANDO GERA√á√ÉO DE PRINTS COM DEBUG...")
    sucessos, falhas = gerar_prints_com_debug()
    
    print(f"\nüìä RESULTADO FINAL:")
    print(f"‚úÖ Sucessos: {len(sucessos)}")
    print(f"‚ùå Falhas: {len(falhas)}")
    
    if falhas:
        print(f"\nüîç DETALHES DAS FALHAS:")
        for falha in falhas:
            print(f"  - {falha}") 